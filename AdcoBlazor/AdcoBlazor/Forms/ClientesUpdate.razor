@page "/clientesupdate"

@using System.Collections.Generic
@using System.Linq
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers;
@using AdcoBlazor.Models;
@using AdcoBlazor.Data;

@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Net;
@using System.Net.Http.Headers;
@using System.Net.Http.Json;
@using System.Text;
@using System.Threading.Tasks;
@using Newtonsoft.Json;

@inject AppState AppState
@inject InsertData InsertData
@inject NavigationManager NavigationManager;

<body class="sidebar-mini-xs layout-fixed">

	<div class="page">
		<div class="sidebar">
			<Sidebar />
		</div>

		<main class="" style="margin-left:75px;">
			<div class="">

				<NavBar />

			</div>

			<article class="content" style="    margin-left: 15px;">

				<section class="content-header">
					<div class="container-fluid">
						<div class="row mb-2">
							<div class="col-sm-6">
								<h1>Clientes Actualizar</h1>
							</div>
							<div class="col-sm-6">
								<ol class="breadcrumb float-sm-right">
									<li class="breadcrumb-item"><a class="btn btn-block btn-success" href="clientes">Volver</a></li>
								</ol>
							</div>
						</div>
					</div>
				</section>


				<div class="card card-primary">
					<div class="card-header">
						<h3 class=""></h3>
					</div>

					@if (ClientData != null)
					{
					<form action="" method="post">

						
							<div class="card-body">
							<div class="form-group">
								<label for="exampleInputEmail1">Nombre</label>
									<input type="text" @bind="ClientData.Nombre" class="form-control" id="exampleInputEmail1" placeholder="Nombre">
							</div>

							<div class="form-group">
								<label for="exampleInputPassword1">Metodo de pago</label>
									<input type="text" @bind="ClientData.MetodoPago" class="form-control" id="exampleInputPassword1" placeholder="Metodo de pago">
							</div>


							<div class="form-group">
								<label for="exampleInputPassword1">Documentos</label>
									<input type="text" @bind="ClientData.Documentos" class="form-control" id="exampleInputPassword1" placeholder="Documentos">
							</div>

							<div class="form-group">
								<label for="exampleInputPassword1">Observaciones</label>
									<input type="text" @bind="ClientData.Observaciones" class="form-control" id="exampleInputPassword1" placeholder="Observaciones">
							</div>
								


							<div class="card-footer">
								<button type="button" class="btn btn-primary" @onclick="OnSubmitAsync">Submit</button>

							</div>


						</div>
						
					</form>
					}
				</div>

			</article>

		</main>
	</div>

</body>

@code {
	private List<Client> Clients { get; set; } = new List<Client>();
	private Client ClientData { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ClientData = await LoadClientAsync();
	}

	private AppState appstate { get; set; } = new AppState();
	private Client cliente;

	public async Task<Client> LoadClientAsync()
	{

		int clientId = AppState.Clientid;

		int id = 4;

		var client = new HttpClient();
		var request = new HttpRequestMessage(HttpMethod.Get, $"http://127.0.0.1:8000/module/clients/{clientId}/");
		request.Headers.Add("X-CSRFToken", appstate.CSRFToken);
		request.Headers.Add("Authorization", appstate.Barear);
		request.Headers.Add("Cookie", appstate.SesionId);
		var response = await client.SendAsync(request);
		response.EnsureSuccessStatusCode();
		Console.WriteLine(await response.Content.ReadAsStringAsync());


		if (response.IsSuccessStatusCode)
		{
			var clients = await response.Content.ReadFromJsonAsync<Client>();
			return clients;
		}

		return null; // Retorna null si no se puede cargar el cliente
	}

private async Task OnSubmitAsync()
	{

		int clientId = AppState.Clientid;

		var client = new HttpClient();
		var request = new HttpRequestMessage(HttpMethod.Put, $"http://127.0.0.1:8000/module/clients/{clientId}/");

		var updateData = new Dictionary<string, object>
		{
			{"nombre", ClientData.Nombre},
			{"metodo_pago", ClientData.MetodoPago},
			{"documentos", ClientData.Documentos},
			{"observaciones", ClientData.Observaciones},
		};

		var content = new StringContent(JsonConvert.SerializeObject(updateData), Encoding.UTF8, "application/json");
		request.Content = content;

		request.Headers.Add("X-CSRFToken", appstate.CSRFToken);
		request.Headers.Add("Authorization", appstate.Barear);
		request.Headers.Add("Cookie", appstate.SesionId);

		var response = await client.SendAsync(request);
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Success: " + await response.Content.ReadAsStringAsync());
			NavigationManager.NavigateTo("/clientes");

			// Redirecciona a la página de lista de clientes o muestra un mensaje de éxito
			// NavigationManager.NavigateTo("/clientes");
		}
		else
		{
			Console.WriteLine("Error: " + await response.Content.ReadAsStringAsync());
			// Muestra un mensaje de error
		}
	}

}

